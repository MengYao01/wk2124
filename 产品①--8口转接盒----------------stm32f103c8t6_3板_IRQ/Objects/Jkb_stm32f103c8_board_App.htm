<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Jkb_stm32f103c8_board_App.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Jkb_stm32f103c8_board_App.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Thu Jan 25 14:17:48 2018
<BR><P>
<H3>Maximum Stack Usage =        308 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; cf8051_service_routine &rArr; mainboard_service_routine &rArr; part3_repost_s3c44bx0_data_to_cf8051 &rArr; orders_operations &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from wk2124s.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from wk2124s2.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from bsp_systick.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from bsp_usart2.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3e]">epca0_timeover_proc</a> from timerout.o(i.epca0_timeover_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[3f]">epca1_timeover_proc</a> from timerout.o(i.epca1_timeover_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[40]">epca2_timeover_proc</a> from timerout.o(i.epca2_timeover_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[38]">fputc</a> from bsp_printf.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[43]">led_timeover_proc</a> from timerout.o(i.led_timeover_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3d]">pca0_timeover_proc</a> from timerout.o(i.pca0_timeover_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[3c]">pca1_timeover_proc</a> from timerout.o(i.pca1_timeover_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[42]">resource_timeover_proc</a> from timerout.o(i.resource_timeover_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[3a]">uart0_timeover_proc</a> from timerout.o(i.uart0_timeover_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[39]">uart1_timeover_proc</a> from timerout.o(i.uart1_timeover_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[46]">update_restart_proc</a> from timerout.o(i.update_restart_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[44]">update_startup_proc</a> from timerout.o(i.update_startup_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[45]">update_write_packets_proc</a> from timerout.o(i.update_write_packets_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[41]">usart0_timeover_proc</a> from timerout.o(i.usart0_timeover_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[3b]">usart1_timeover_proc</a> from timerout.o(i.usart1_timeover_proc) referenced from timerout.o(i.active_myPherial_from_reset)
 <LI><a href="#[47]">yijian_read_version_timer_proc</a> from timerout.o(i.yijian_read_version_timer_proc) referenced from timerout.o(i.active_myPherial_from_reset)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[48]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fd]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[fe]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ff]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[100]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[101]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_EID_to_410
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unControl_wirteEID_info
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_cf8051
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_version_info
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_410_ports_info
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_A6_or_F6_msgs_handle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fulling_version_trayNums_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Patch_guide_action
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Order_To_Source
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_0x0d_sub_cmd_xx_timeout_func
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_boards_info_handler
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_cf8051
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_A6_or_F6_msgs_handle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_myPherial_from_reset
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_uart1_rx_function
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_EID_to_410
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unControl_wirteEID_info
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_cf8051
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_version_info
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_410_ports_info
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_A6_or_F6_msgs_handle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_guide_test
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Patch_guide_action
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Order_To_Source
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_service_routine
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_update_packet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_recv_handle_pthread
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_guide_test
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_0x0d_sub_cmd_xx_timeout_func
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yijian_read_version_timer_proc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_write_packets_proc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_startup_proc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_restart_proc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_timeover_proc
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[49]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[107]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>Bsp_Gpio_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_gpio.o(i.Bsp_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bsp_Gpio_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[60]"></a>Bsp_Printf_Init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, bsp_printf.o(i.Bsp_Printf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Bsp_Printf_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[55]"></a>Bsp_Spi_Init</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, bsp_spi.o(i.Bsp_Spi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Bsp_Spi_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[52]"></a>Bsp_Systick_Init</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, bsp_systick.o(i.Bsp_Systick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bsp_Systick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[54]"></a>Bsp_TIM2_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_timer2.o(i.Bsp_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bsp_TIM2_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[53]"></a>Bsp_Usart2_Init</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, bsp_usart2.o(i.Bsp_Usart2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Bsp_Usart2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[71]"></a>Delay_ms</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp_timer2.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca2_Send_String
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca0_Send_String
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca1_Send_String
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart1_Send_String
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_uart0_Send_String
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myUART1_send_multi_bytes
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_update_packet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_service_routine
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart0_Send_String
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca0_Send_String
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca1_Send_String
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>EXHW_WK2412S1_Read_FIFO</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wk2124s.o(i.EXHW_WK2412S1_Read_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXHW_WK2412S1_Read_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_WK2412S1_Read_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_4_GetBuf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_3_GetBuf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_2_GetBuf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_1_GetBuf
</UL>

<P><STRONG><a name="[79]"></a>EXHW_WK2412S1_Read_Reg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wk2124s.o(i.EXHW_WK2412S1_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXHW_WK2412S1_Read_Reg &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_WK2412S1_Read_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_4_SendBuf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_4_GetBuf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca0_Send_String
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca0_IRQHandler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_3_SendBuf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_3_GetBuf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca1_Send_String
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca1_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_2_SendBuf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_2_GetBuf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart1_Send_String
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart1_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_1_SendBuf
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_1_GetBuf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_uart0_Send_String
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_uart0_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S_Enable_Tx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S_Enable_Rx
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S_Disable_Tx
</UL>

<P><STRONG><a name="[7a]"></a>EXHW_WK2412S1_Write_FIFO</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wk2124s.o(i.EXHW_WK2412S1_Write_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXHW_WK2412S1_Write_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_WK2412S1_Read_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_4_SendBuf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_3_SendBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_2_SendBuf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_1_SendBuf
</UL>

<P><STRONG><a name="[7b]"></a>EXHW_WK2412S1_Write_Reg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wk2124s.o(i.EXHW_WK2412S1_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXHW_WK2412S1_Write_Reg &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_WK2412S1_Read_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_pca0_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_pca1_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_usart1_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_uart0_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S_Enable_Tx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S_Enable_Rx
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S_Disable_Tx
</UL>

<P><STRONG><a name="[7c]"></a>EXHW_WK2412S2_Disable_Tx</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wk2124s2.o(i.EXHW_WK2412S2_Disable_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXHW_WK2412S2_Disable_Tx &rArr; EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_Reg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_disable_tx
</UL>

<P><STRONG><a name="[7f]"></a>EXHW_WK2412S2_Enable_Rx</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, wk2124s2.o(i.EXHW_WK2412S2_Enable_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXHW_WK2412S2_Enable_Rx &rArr; EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_Reg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_rx
</UL>

<P><STRONG><a name="[80]"></a>EXHW_WK2412S2_Enable_Tx</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, wk2124s2.o(i.EXHW_WK2412S2_Enable_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXHW_WK2412S2_Enable_Tx &rArr; EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_Reg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_tx
</UL>

<P><STRONG><a name="[57]"></a>EXHW_WK2412S2_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wk2124s2.o(i.EXHW_WK2412S2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXHW_WK2412S2_Init &rArr; EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[81]"></a>EXHW_WK2412S2_Read_FIFO</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wk2124s2.o(i.EXHW_WK2412S2_Read_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXHW_WK2412S2_Read_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_WK2412S2_Read_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_5_GetBuf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_8_GetBuf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_7_GetBuf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_6_GetBuf
</UL>

<P><STRONG><a name="[7d]"></a>EXHW_WK2412S2_Read_Reg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wk2124s2.o(i.EXHW_WK2412S2_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXHW_WK2412S2_Read_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_WK2412S2_Read_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_5_SendBuf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_5_GetBuf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca2_Send_String
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Enable_Tx
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Enable_Rx
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Disable_Tx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_8_SendBuf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_8_GetBuf
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart0_Send_String
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart0_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_7_SendBuf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_7_GetBuf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca0_Send_String
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca0_IRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_6_SendBuf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_6_GetBuf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca1_Send_String
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca1_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>EXHW_WK2412S2_Write_FIFO</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wk2124s2.o(i.EXHW_WK2412S2_Write_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_WK2412S2_Read_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_5_SendBuf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_8_SendBuf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_7_SendBuf
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_6_SendBuf
</UL>

<P><STRONG><a name="[7e]"></a>EXHW_WK2412S2_Write_Reg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wk2124s2.o(i.EXHW_WK2412S2_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_WK2412S2_Read_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_epca2_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Enable_Tx
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Enable_Rx
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Disable_Tx
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_usart0_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_epca0_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_epca1_Init
</UL>

<P><STRONG><a name="[84]"></a>EXHW_WK2412S_Disable_Tx</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, wk2124s.o(i.EXHW_WK2412S_Disable_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXHW_WK2412S_Disable_Tx &rArr; EXHW_WK2412S1_Write_Reg &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_Reg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_disable_tx
</UL>

<P><STRONG><a name="[85]"></a>EXHW_WK2412S_Enable_Rx</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, wk2124s.o(i.EXHW_WK2412S_Enable_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXHW_WK2412S_Enable_Rx &rArr; EXHW_WK2412S1_Write_Reg &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_Reg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_rx
</UL>

<P><STRONG><a name="[86]"></a>EXHW_WK2412S_Enable_Tx</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, wk2124s.o(i.EXHW_WK2412S_Enable_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXHW_WK2412S_Enable_Tx &rArr; EXHW_WK2412S1_Write_Reg &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_Reg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_tx
</UL>

<P><STRONG><a name="[56]"></a>EXHW_WK2412S_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wk2124s.o(i.EXHW_WK2412S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXHW_WK2412S_Init &rArr; EXHW_WK2412S1_Write_Reg &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wk2124s.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI0_IRQHandler &rArr; WK2124_pca0_IRQHandler &rArr; Wk2124S1_4_GetBuf &rArr; EXHW_WK2412S1_Read_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca0_IRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca1_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart1_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_uart0_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, wk2124s2.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI15_10_IRQHandler &rArr; WK2124_epca2_IRQHandler &rArr; Wk2124S2_5_GetBuf &rArr; EXHW_WK2412S2_Read_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca2_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart0_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca0_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
</UL>

<P><STRONG><a name="[6b]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
</UL>

<P><STRONG><a name="[62]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Printf_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart2_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
</UL>

<P><STRONG><a name="[68]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
</UL>

<P><STRONG><a name="[70]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_Reg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_FIFO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_FIFO
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca2_Send_String
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca0_Send_String
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca1_Send_String
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart1_Send_String
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_Reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_FIFO
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_FIFO
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_uart0_Send_String
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Led_Flash
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart0_Send_String
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca0_Send_String
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca1_Send_String
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_Reg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_FIFO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_FIFO
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca2_Send_String
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca0_Send_String
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca1_Send_String
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart1_Send_String
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_Reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_FIFO
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_FIFO
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_uart0_Send_String
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myUART1_send_multi_bytes
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Led_Flash
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart0_Send_String
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca0_Send_String
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca1_Send_String
</UL>

<P><STRONG><a name="[5e]"></a>HW_WK2124_epca0_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wk2124_epca0.o(i.HW_WK2124_epca0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_WK2124_epca0_Init &rArr; EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[5d]"></a>HW_WK2124_epca1_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wk2124_epca1.o(i.HW_WK2124_epca1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_WK2124_epca1_Init &rArr; EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[5c]"></a>HW_WK2124_epca2_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wk2124_epca2.o(i.HW_WK2124_epca2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_WK2124_epca2_Init &rArr; EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[5b]"></a>HW_WK2124_pca0_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wk2124_pca0.o(i.HW_WK2124_pca0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_WK2124_pca0_Init &rArr; EXHW_WK2412S1_Write_Reg &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[5a]"></a>HW_WK2124_pca1_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wk2124_pca1.o(i.HW_WK2124_pca1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_WK2124_pca1_Init &rArr; EXHW_WK2412S1_Write_Reg &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[58]"></a>HW_WK2124_uart0_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wk2124_uart0.o(i.HW_WK2124_uart0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_WK2124_uart0_Init &rArr; EXHW_WK2412S1_Write_Reg &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[5f]"></a>HW_WK2124_usart0_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wk2124_usart0.o(i.HW_WK2124_usart0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_WK2124_usart0_Init &rArr; EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[59]"></a>HW_WK2124_usart1_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wk2124_usart1.o(i.HW_WK2124_usart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_WK2124_usart1_Init &rArr; EXHW_WK2412S1_Write_Reg &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
</UL>

<P><STRONG><a name="[c6]"></a>Initialize_a_node</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, newlist.o(i.Initialize_a_node))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createNewList
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
</UL>

<P><STRONG><a name="[f1]"></a>Is_this_EmptyList</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, newlist.o(i.Is_this_EmptyList))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_feedback_msgs_to_s3c44b0x
</UL>

<P><STRONG><a name="[6a]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart2_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
</UL>

<P><STRONG><a name="[69]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart2_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
</UL>

<P><STRONG><a name="[e8]"></a>Oops_verify_data_volume_frameid</STRONG> (Thumb, 450 bytes, Stack size 12 bytes, s3c44b0x.o(i.Oops_verify_data_volume_frameid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Oops_verify_data_volume_frameid
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_service_routine
</UL>

<P><STRONG><a name="[67]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart2_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TIM2_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
</UL>

<P><STRONG><a name="[61]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Printf_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart2_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
</UL>

<P><STRONG><a name="[a6]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[96]"></a>ReadFlashData</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, bsp_flash.o(i.ReadFlashData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadFlashData
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_sim3u1xx
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_A6_or_F6_msgs_handle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data
</UL>

<P><STRONG><a name="[9c]"></a>Run_Led_Flash</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_systick.o(i.Run_Led_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Run_Led_Flash
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_timeover_proc
</UL>

<P><STRONG><a name="[78]"></a>SPI1_WK2412S1_Read_Write</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_spi.o(i.SPI1_WK2412S1_Read_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_Reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_FIFO
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_FIFO
</UL>

<P><STRONG><a name="[82]"></a>SPI2_WK2412S2_Read_Write</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_spi.o(i.SPI2_WK2412S2_Read_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_Reg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_FIFO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_FIFO
</UL>

<P><STRONG><a name="[6f]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
</UL>

<P><STRONG><a name="[9d]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_WK2412S2_Read_Write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_WK2412S1_Read_Write
</UL>

<P><STRONG><a name="[9f]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_WK2412S2_Read_Write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_WK2412S1_Read_Write
</UL>

<P><STRONG><a name="[9e]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_WK2412S2_Read_Write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_WK2412S1_Read_Write
</UL>

<P><STRONG><a name="[6e]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bsp_systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; timer_periodic_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_periodic_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[76]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[75]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[72]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TIM2_Init
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, bsp_usart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_irq_enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart2_Init
</UL>

<P><STRONG><a name="[66]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Printf_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart2_Init
</UL>

<P><STRONG><a name="[df]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[64]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Printf_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart2_Init
</UL>

<P><STRONG><a name="[63]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Printf_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart2_Init
</UL>

<P><STRONG><a name="[de]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8f]"></a>WK2124_epca0_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wk2124_epca0.o(i.WK2124_epca0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WK2124_epca0_IRQHandler &rArr; Wk2124S2_7_GetBuf &rArr; EXHW_WK2412S2_Read_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_7_GetBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>WK2124_epca0_Send_String</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wk2124_epca0.o(i.WK2124_epca0_Send_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WK2124_epca0_Send_String &rArr; Wk2124S2_7_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_7_SendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_send
</UL>

<P><STRONG><a name="[8e]"></a>WK2124_epca1_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wk2124_epca1.o(i.WK2124_epca1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WK2124_epca1_IRQHandler &rArr; Wk2124S2_6_GetBuf &rArr; EXHW_WK2412S2_Read_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_6_GetBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>WK2124_epca1_Send_String</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wk2124_epca1.o(i.WK2124_epca1_Send_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WK2124_epca1_Send_String &rArr; Wk2124S2_6_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_6_SendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_send
</UL>

<P><STRONG><a name="[8d]"></a>WK2124_epca2_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wk2124_epca2.o(i.WK2124_epca2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WK2124_epca2_IRQHandler &rArr; Wk2124S2_5_GetBuf &rArr; EXHW_WK2412S2_Read_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_5_GetBuf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>WK2124_epca2_Send_String</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wk2124_epca2.o(i.WK2124_epca2_Send_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WK2124_epca2_Send_String &rArr; Wk2124S2_5_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_5_SendBuf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_send
</UL>

<P><STRONG><a name="[8c]"></a>WK2124_pca0_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wk2124_pca0.o(i.WK2124_pca0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WK2124_pca0_IRQHandler &rArr; Wk2124S1_4_GetBuf &rArr; EXHW_WK2412S1_Read_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_4_GetBuf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>WK2124_pca0_Send_String</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wk2124_pca0.o(i.WK2124_pca0_Send_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WK2124_pca0_Send_String &rArr; Wk2124S1_4_SendBuf &rArr; EXHW_WK2412S1_Write_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_4_SendBuf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_send
</UL>

<P><STRONG><a name="[8b]"></a>WK2124_pca1_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wk2124_pca1.o(i.WK2124_pca1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WK2124_pca1_IRQHandler &rArr; Wk2124S1_3_GetBuf &rArr; EXHW_WK2412S1_Read_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_3_GetBuf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>WK2124_pca1_Send_String</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wk2124_pca1.o(i.WK2124_pca1_Send_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WK2124_pca1_Send_String &rArr; Wk2124S1_3_SendBuf &rArr; EXHW_WK2412S1_Write_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_3_SendBuf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_send
</UL>

<P><STRONG><a name="[89]"></a>WK2124_uart0_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wk2124_uart0.o(i.WK2124_uart0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WK2124_uart0_IRQHandler &rArr; Wk2124S1_1_GetBuf &rArr; EXHW_WK2412S1_Read_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_1_GetBuf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>WK2124_uart0_Send_String</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wk2124_uart0.o(i.WK2124_uart0_Send_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WK2124_uart0_Send_String &rArr; Wk2124S1_1_SendBuf &rArr; EXHW_WK2412S1_Write_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_1_SendBuf
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_send
</UL>

<P><STRONG><a name="[90]"></a>WK2124_usart0_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wk2124_usart0.o(i.WK2124_usart0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WK2124_usart0_IRQHandler &rArr; Wk2124S2_8_GetBuf &rArr; EXHW_WK2412S2_Read_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_8_GetBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>WK2124_usart0_Send_String</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wk2124_usart0.o(i.WK2124_usart0_Send_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WK2124_usart0_Send_String &rArr; Wk2124S2_8_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S2_8_SendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_send
</UL>

<P><STRONG><a name="[8a]"></a>WK2124_usart1_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wk2124_usart1.o(i.WK2124_usart1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WK2124_usart1_IRQHandler &rArr; Wk2124S1_2_GetBuf &rArr; EXHW_WK2412S1_Read_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_2_GetBuf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>WK2124_usart1_Send_String</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wk2124_usart1.o(i.WK2124_usart1_Send_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WK2124_usart1_Send_String &rArr; Wk2124S1_2_SendBuf &rArr; EXHW_WK2412S1_Write_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wk2124S1_2_SendBuf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_send
</UL>

<P><STRONG><a name="[b6]"></a>Wk2124S1_1_GetBuf</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wk2124_uart0.o(i.Wk2124S1_1_GetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Wk2124S1_1_GetBuf &rArr; EXHW_WK2412S1_Read_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_uart0_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>Wk2124S1_1_SendBuf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wk2124_uart0.o(i.Wk2124S1_1_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Wk2124S1_1_SendBuf &rArr; EXHW_WK2412S1_Write_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_FIFO
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_uart0_Send_String
</UL>

<P><STRONG><a name="[bc]"></a>Wk2124S1_2_GetBuf</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wk2124_usart1.o(i.Wk2124S1_2_GetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Wk2124S1_2_GetBuf &rArr; EXHW_WK2412S1_Read_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart1_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>Wk2124S1_2_SendBuf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wk2124_usart1.o(i.Wk2124S1_2_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Wk2124S1_2_SendBuf &rArr; EXHW_WK2412S1_Write_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_FIFO
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart1_Send_String
</UL>

<P><STRONG><a name="[b3]"></a>Wk2124S1_3_GetBuf</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wk2124_pca1.o(i.Wk2124S1_3_GetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Wk2124S1_3_GetBuf &rArr; EXHW_WK2412S1_Read_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca1_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>Wk2124S1_3_SendBuf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wk2124_pca1.o(i.Wk2124S1_3_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Wk2124S1_3_SendBuf &rArr; EXHW_WK2412S1_Write_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_FIFO
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca1_Send_String
</UL>

<P><STRONG><a name="[b0]"></a>Wk2124S1_4_GetBuf</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wk2124_pca0.o(i.Wk2124S1_4_GetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Wk2124S1_4_GetBuf &rArr; EXHW_WK2412S1_Read_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca0_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>Wk2124S1_4_SendBuf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wk2124_pca0.o(i.Wk2124S1_4_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Wk2124S1_4_SendBuf &rArr; EXHW_WK2412S1_Write_FIFO &rArr; SPI1_WK2412S1_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Write_FIFO
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S1_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca0_Send_String
</UL>

<P><STRONG><a name="[ad]"></a>Wk2124S2_5_GetBuf</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wk2124_epca2.o(i.Wk2124S2_5_GetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Wk2124S2_5_GetBuf &rArr; EXHW_WK2412S2_Read_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca2_IRQHandler
</UL>

<P><STRONG><a name="[af]"></a>Wk2124S2_5_SendBuf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wk2124_epca2.o(i.Wk2124S2_5_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Wk2124S2_5_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_FIFO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca2_Send_String
</UL>

<P><STRONG><a name="[aa]"></a>Wk2124S2_6_GetBuf</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wk2124_epca1.o(i.Wk2124S2_6_GetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Wk2124S2_6_GetBuf &rArr; EXHW_WK2412S2_Read_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca1_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>Wk2124S2_6_SendBuf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wk2124_epca1.o(i.Wk2124S2_6_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Wk2124S2_6_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_FIFO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca1_Send_String
</UL>

<P><STRONG><a name="[a7]"></a>Wk2124S2_7_GetBuf</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wk2124_epca0.o(i.Wk2124S2_7_GetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Wk2124S2_7_GetBuf &rArr; EXHW_WK2412S2_Read_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca0_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>Wk2124S2_7_SendBuf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wk2124_epca0.o(i.Wk2124S2_7_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Wk2124S2_7_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_FIFO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca0_Send_String
</UL>

<P><STRONG><a name="[b9]"></a>Wk2124S2_8_GetBuf</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wk2124_usart0.o(i.Wk2124S2_8_GetBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Wk2124S2_8_GetBuf &rArr; EXHW_WK2412S2_Read_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart0_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>Wk2124S2_8_SendBuf</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wk2124_usart0.o(i.Wk2124S2_8_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Wk2124S2_8_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Write_FIFO
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart0_Send_String
</UL>

<P><STRONG><a name="[bf]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10a]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[e5]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c1]"></a>active_myPherial_from_reset</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, timerout.o(i.active_myPherial_from_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = active_myPherial_from_reset &rArr; createNewList &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_timer_list_reset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_timer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createNewList
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>add_a_new_node</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, newlist.o(i.add_a_new_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sort_list_from_priority
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_a_node
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim3u146_updata_ok_to_s3c2416
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim3u146_kaiji_cmd_to_s3c2416
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_version_info
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tray_info
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_guide_test
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_0x0d_sub_cmd_xx_timeout_func
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_boards_info_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_write_packets_proc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_startup_proc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_restart_proc
</UL>

<P><STRONG><a name="[c4]"></a>add_timer</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, soft_timer.o(i.add_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = add_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_myPherial_from_reset
</UL>

<P><STRONG><a name="[cf]"></a>app_calccrc8</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, crc8.o(i.app_calccrc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_calccrc8 &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_service_routine
</UL>

<P><STRONG><a name="[d3]"></a>back_trays_types</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cf8051.o(i.back_trays_types))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fulling_resource_trayNums_data
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_boards_info_handler
</UL>

<P><STRONG><a name="[d7]"></a>cf8051_service_routine</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, cf8051.o(i.cf8051_service_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = cf8051_service_routine &rArr; mainboard_service_routine &rArr; part3_repost_s3c44bx0_data_to_cf8051 &rArr; orders_operations &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_tx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_rx
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_service_routine
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_uarts
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_logs
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_send_data_pthread
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_recv_handle_pthread
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>cmd_0x0d_sub_cmd_xx_timeout_func</STRONG> (Thumb, 390 bytes, Stack size 96 bytes, cf8051.o(i.cmd_0x0d_sub_cmd_xx_timeout_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
</UL>

<P><STRONG><a name="[93]"></a>cpu_disable_irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_timer2.o(i.cpu_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_A6_or_F6_msgs_handle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data
</UL>

<P><STRONG><a name="[97]"></a>cpu_enable_irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_timer2.o(i.cpu_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_A6_or_F6_msgs_handle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data
</UL>

<P><STRONG><a name="[98]"></a>crc8</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, crc8.o(i.crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_cf8051
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim3u146_updata_ok_to_s3c2416
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim3u146_kaiji_cmd_to_s3c2416
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_version_info
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tray_info
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_feedback_msgs_to_s3c44b0x
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_guide_test
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fulling_zd_tray_resource_trayNums_data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fulling_version_trayNums_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fulling_resource_trayNums_data
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calccrc8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_service_routine
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_0x0d_sub_cmd_xx_timeout_func
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_send_data_pthread
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_recv_data_crc_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_boards_info_handler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_write_packets_proc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_startup_proc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_restart_proc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_myPherial_from_reset
</UL>

<P><STRONG><a name="[c2]"></a>createNewList</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, newlist.o(i.createNewList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = createNewList &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize_a_node
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_myPherial_from_reset
</UL>

<P><STRONG><a name="[3e]"></a>epca0_timeover_proc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timerout.o(i.epca0_timeover_proc))
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[3f]"></a>epca1_timeover_proc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timerout.o(i.epca1_timeover_proc))
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[40]"></a>epca2_timeover_proc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timerout.o(i.epca2_timeover_proc))
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[38]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_printf.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[f9]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_a_old_node
</UL>

<P><STRONG><a name="[43]"></a>led_timeover_proc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timerout.o(i.led_timeover_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_timeover_proc &rArr; Run_Led_Flash
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Led_Flash
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = main &rArr; cf8051_service_routine &rArr; mainboard_service_routine &rArr; part3_repost_s3c44bx0_data_to_cf8051 &rArr; orders_operations &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_uart1_rx_function
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_service_routine
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_service_routine
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Board_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_myPherial_from_reset
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[db]"></a>mainboard_service_routine</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, s3c44b0x.o(i.mainboard_service_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = mainboard_service_routine &rArr; part3_repost_s3c44bx0_data_to_cf8051 &rArr; orders_operations &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myUART1_send_multi_bytes
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Oops_verify_data_volume_frameid
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_feedback_msgs_to_s3c44b0x
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_A6_or_F6_msgs_handle
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_calccrc8
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_service_routine
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createNewList
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
</UL>

<P><STRONG><a name="[94]"></a>myFLASHCTRL0_run_erase_page_mode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_flash.o(i.myFLASHCTRL0_run_erase_page_mode))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_sim3u1xx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_A6_or_F6_msgs_handle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data
</UL>

<P><STRONG><a name="[95]"></a>myFLASHCTRL0_run_write_flash_mode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_flash.o(i.myFLASHCTRL0_run_write_flash_mode))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_sim3u1xx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_A6_or_F6_msgs_handle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data
</UL>

<P><STRONG><a name="[ec]"></a>mySerial_disable_tx</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, myservice.o(i.mySerial_disable_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mySerial_disable_tx &rArr; EXHW_WK2412S2_Disable_Tx &rArr; EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Disable_Tx
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S_Disable_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_update_packet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
</UL>

<P><STRONG><a name="[da]"></a>mySerial_enable_rx</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, myservice.o(i.mySerial_enable_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mySerial_enable_rx &rArr; EXHW_WK2412S2_Enable_Rx &rArr; EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Enable_Rx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S_Enable_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_update_packet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_service_routine
</UL>

<P><STRONG><a name="[ed]"></a>mySerial_enable_send</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, myservice.o(i.mySerial_enable_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mySerial_enable_send &rArr; WK2124_epca2_Send_String &rArr; Wk2124S2_5_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca2_Send_String
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca0_Send_String
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca1_Send_String
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart1_Send_String
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_uart0_Send_String
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart0_Send_String
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca0_Send_String
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca1_Send_String
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_send_string
</UL>

<P><STRONG><a name="[d9]"></a>mySerial_enable_tx</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, myservice.o(i.mySerial_enable_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mySerial_enable_tx &rArr; EXHW_WK2412S2_Enable_Tx &rArr; EXHW_WK2412S2_Write_Reg &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Enable_Tx
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S_Enable_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_update_packet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_service_routine
</UL>

<P><STRONG><a name="[d5]"></a>mySerial_send_string</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, myservice.o(i.mySerial_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mySerial_send_string &rArr; mySerial_enable_send &rArr; WK2124_epca2_Send_String &rArr; Wk2124S2_5_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_send
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_update_packet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_send_data_pthread
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_recv_handle_pthread
</UL>

<P><STRONG><a name="[ea]"></a>myUART1_send_multi_bytes</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_usart2.o(i.myUART1_send_multi_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = myUART1_send_multi_bytes &rArr; Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_irq_enable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_feedback_msgs_to_s3c44b0x
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_service_routine
</UL>

<P><STRONG><a name="[e4]"></a>open_uart1_rx_function</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_usart2.o(i.open_uart1_rx_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = open_uart1_rx_function
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>pca0_timeover_proc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timerout.o(i.pca0_timeover_proc))
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[3c]"></a>pca1_timeover_proc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timerout.o(i.pca1_timeover_proc))
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[a3]"></a>reload_timer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, soft_timer.o(i.reload_timer))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca2_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca0_IRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca1_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart1_IRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_uart0_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_cf8051
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart0_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca0_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca1_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yijian_read_version_timer_proc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_write_packets_proc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_startup_proc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_restart_proc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_timeover_proc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_timeover_proc
</UL>

<P><STRONG><a name="[e7]"></a>remove_a_old_node</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, newlist.o(i.remove_a_old_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = remove_a_old_node &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_A6_or_F6_msgs_handle
</UL>

<P><STRONG><a name="[9b]"></a>repost_data_to_cf8051_immediately</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, cf8051.o(i.repost_data_to_cf8051_immediately))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_send_string
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_tx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_rx
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_disable_tx
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_0x0d_sub_cmd_xx_timeout_func
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_uarts
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_EID_to_410
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unControl_wirteEID_info
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_version_info
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_410_ports_info
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_guide_test
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Patch_guide_action
</UL>

<P><STRONG><a name="[fa]"></a>repost_update_packet</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, cf8051.o(i.repost_update_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = repost_update_packet &rArr; mySerial_send_string &rArr; mySerial_enable_send &rArr; WK2124_epca2_Send_String &rArr; Wk2124S2_5_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_send_string
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_tx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_enable_rx
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_disable_tx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_uarts
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_cf8051
</UL>

<P><STRONG><a name="[fb]"></a>reset_mcu_enter_default_mode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, myservice.o(i.reset_mcu_enter_default_mode))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_sim3u1xx
</UL>

<P><STRONG><a name="[42]"></a>resource_timeover_proc</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, timerout.o(i.resource_timeover_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resource_timeover_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_irq_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[c3]"></a>soft_timer_list_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, soft_timer.o(i.soft_timer_list_reset))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;active_myPherial_from_reset
</UL>

<P><STRONG><a name="[c7]"></a>sort_list_from_priority</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, newlist.o(i.sort_list_from_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sort_list_from_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
</UL>

<P><STRONG><a name="[a4]"></a>start_timer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, soft_timer.o(i.start_timer))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca2_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca0_IRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_pca1_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart1_IRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_uart0_IRQHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_uart1_rx_function
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_cf8051
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_version_info
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_410_ports_info
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_usart0_IRQHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca0_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WK2124_epca1_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_timeover_proc
</UL>

<P><STRONG><a name="[d2]"></a>stop_timer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, soft_timer.o(i.stop_timer))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_periodic_refresh
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_boards_info_handler
</UL>

<P><STRONG><a name="[a2]"></a>timer_periodic_refresh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, soft_timer.o(i.timer_periodic_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_periodic_refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3a]"></a>uart0_timeover_proc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timerout.o(i.uart0_timeover_proc))
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[39]"></a>uart1_timeover_proc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timerout.o(i.uart1_timeover_proc))
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[46]"></a>update_restart_proc</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, timerout.o(i.update_restart_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = update_restart_proc &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[44]"></a>update_startup_proc</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, timerout.o(i.update_startup_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = update_startup_proc &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[45]"></a>update_write_packets_proc</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, timerout.o(i.update_write_packets_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = update_write_packets_proc &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[41]"></a>usart0_timeover_proc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timerout.o(i.usart0_timeover_proc))
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[3b]"></a>usart1_timeover_proc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timerout.o(i.usart1_timeover_proc))
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL>
<P><STRONG><a name="[a5]"></a>usart2_rx_irq_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_usart2.o(i.usart2_rx_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myUART1_send_multi_bytes
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_version_info
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_410_ports_info
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yijian_read_version_timer_proc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resource_timeover_proc
</UL>

<P><STRONG><a name="[47]"></a>yijian_read_version_timer_proc</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, timerout.o(i.yijian_read_version_timer_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = yijian_read_version_timer_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_irq_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerout.o(i.active_myPherial_from_reset)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[65]"></a>NVIC_Configuration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_printf.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Printf_Init
</UL>

<P><STRONG><a name="[c8]"></a>alarm_module_tray_connect</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, cf8051.o(i.alarm_module_tray_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alarm_module_tray_connect &rArr; alarm_module_tray_output_illeagle_return_to_normal
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_cache_data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_output_illeagle_return_to_normal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_input_illeagle_return_to_normal
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_input_illeagle
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_logs
</UL>

<P><STRONG><a name="[cd]"></a>alarm_module_tray_disconnect</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, cf8051.o(i.alarm_module_tray_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = alarm_module_tray_disconnect &rArr; alarm_module_tray_output_illeagle_return_to_normal
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_output_illeagle_return_to_normal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_output_illeagle
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_input_illeagle_return_to_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_logs
</UL>

<P><STRONG><a name="[c9]"></a>alarm_module_tray_input_illeagle</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, cf8051.o(i.alarm_module_tray_input_illeagle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alarm_module_tray_input_illeagle
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_connect
</UL>

<P><STRONG><a name="[ca]"></a>alarm_module_tray_input_illeagle_return_to_normal</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, cf8051.o(i.alarm_module_tray_input_illeagle_return_to_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alarm_module_tray_input_illeagle_return_to_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_disconnect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_connect
</UL>

<P><STRONG><a name="[ce]"></a>alarm_module_tray_output_illeagle</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, cf8051.o(i.alarm_module_tray_output_illeagle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alarm_module_tray_output_illeagle
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_disconnect
</UL>

<P><STRONG><a name="[cb]"></a>alarm_module_tray_output_illeagle_return_to_normal</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, cf8051.o(i.alarm_module_tray_output_illeagle_return_to_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alarm_module_tray_output_illeagle_return_to_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_disconnect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_connect
</UL>

<P><STRONG><a name="[d0]"></a>cf8051_boards_info_handler</STRONG> (Thumb, 1600 bytes, Stack size 32 bytes, cf8051.o(i.cf8051_boards_info_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cf8051_boards_info_handler &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_timer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_trays_types
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_recv_data_crc_check
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_recv_handle_pthread
</UL>

<P><STRONG><a name="[d1]"></a>cf8051_recv_data_crc_check</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cf8051.o(i.cf8051_recv_data_crc_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cf8051_recv_data_crc_check &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_recv_handle_pthread
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_boards_info_handler
</UL>

<P><STRONG><a name="[d4]"></a>cf8051_recv_handle_pthread</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, cf8051.o(i.cf8051_recv_handle_pthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cf8051_recv_handle_pthread &rArr; mySerial_send_string &rArr; mySerial_enable_send &rArr; WK2124_epca2_Send_String &rArr; Wk2124S2_5_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_send_string
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_recv_data_crc_check
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_boards_info_handler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_service_routine
</UL>

<P><STRONG><a name="[d6]"></a>cf8051_send_data_pthread</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cf8051.o(i.cf8051_send_data_pthread))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cf8051_send_data_pthread &rArr; mySerial_send_string &rArr; mySerial_enable_send &rArr; WK2124_epca2_Send_String &rArr; Wk2124S2_5_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mySerial_send_string
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_service_routine
</UL>

<P><STRONG><a name="[cc]"></a>clear_cache_data</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cf8051.o(i.clear_cache_data))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_logs
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_connect
</UL>

<P><STRONG><a name="[dc]"></a>communication_logs</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cf8051.o(i.communication_logs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = communication_logs &rArr; alarm_module_tray_connect &rArr; alarm_module_tray_output_illeagle_return_to_normal
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_cache_data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_disconnect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_module_tray_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_service_routine
</UL>

<P><STRONG><a name="[d8]"></a>detect_uarts</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cf8051.o(i.detect_uarts))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_update_packet
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cf8051_service_routine
</UL>

<P><STRONG><a name="[4e]"></a>Back_Order_To_Source</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, s3c44b0x.o(i.Back_Order_To_Source))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Back_Order_To_Source
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
</UL>

<P><STRONG><a name="[91]"></a>Load_Data</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, s3c44b0x.o(i.Load_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Load_Data &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFLASHCTRL0_run_write_flash_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFLASHCTRL0_run_erase_page_mode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_enable_irq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_disable_irq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
</UL>

<P><STRONG><a name="[9a]"></a>Patch_guide_action</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, s3c44b0x.o(i.Patch_guide_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Patch_guide_action &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
</UL>

<P><STRONG><a name="[e0]"></a>fulling_resource_trayNums_data</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, s3c44b0x.o(i.fulling_resource_trayNums_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fulling_resource_trayNums_data &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;back_trays_types
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_feedback_msgs_to_s3c44b0x
</UL>

<P><STRONG><a name="[e1]"></a>fulling_version_trayNums_data</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, s3c44b0x.o(i.fulling_version_trayNums_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fulling_version_trayNums_data &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_feedback_msgs_to_s3c44b0x
</UL>

<P><STRONG><a name="[e2]"></a>fulling_zd_tray_resource_trayNums_data</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, s3c44b0x.o(i.fulling_zd_tray_resource_trayNums_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fulling_zd_tray_resource_trayNums_data &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_feedback_msgs_to_s3c44b0x
</UL>

<P><STRONG><a name="[e3]"></a>led_guide_test</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, s3c44b0x.o(i.led_guide_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = led_guide_test &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
</UL>

<P><STRONG><a name="[e6]"></a>mainboard_A6_or_F6_msgs_handle</STRONG> (Thumb, 748 bytes, Stack size 48 bytes, s3c44b0x.o(i.mainboard_A6_or_F6_msgs_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mainboard_A6_or_F6_msgs_handle &rArr; remove_a_old_node &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFLASHCTRL0_run_write_flash_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFLASHCTRL0_run_erase_page_mode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_enable_irq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_disable_irq
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_a_old_node
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_service_routine
</UL>

<P><STRONG><a name="[ee]"></a>orders_operations</STRONG> (Thumb, 1612 bytes, Stack size 80 bytes, s3c44b0x.o(i.orders_operations))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = orders_operations &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFLASHCTRL0_run_write_flash_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFLASHCTRL0_run_erase_page_mode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_irq_enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_enable_irq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_disable_irq
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Back_Order_To_Source
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
</UL>

<P><STRONG><a name="[e9]"></a>part3_feedback_msgs_to_s3c44b0x</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, s3c44b0x.o(i.part3_feedback_msgs_to_s3c44b0x))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = part3_feedback_msgs_to_s3c44b0x &rArr; sim3u146_updata_ok_to_s3c2416 &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myUART1_send_multi_bytes
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim3u146_updata_ok_to_s3c2416
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim3u146_kaiji_cmd_to_s3c2416
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fulling_zd_tray_resource_trayNums_data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fulling_version_trayNums_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fulling_resource_trayNums_data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_this_EmptyList
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_service_routine
</UL>

<P><STRONG><a name="[eb]"></a>part3_repost_s3c44bx0_data_to_cf8051</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, s3c44b0x.o(i.part3_repost_s3c44bx0_data_to_cf8051))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = part3_repost_s3c44bx0_data_to_cf8051 &rArr; orders_operations &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_EID_to_410
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unControl_wirteEID_info
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_sim3u1xx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_update_cf8051
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_version_info
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_tray_info
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_410_ports_info
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;orders_operations
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_guide_test
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Patch_guide_action
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mainboard_service_routine
</UL>

<P><STRONG><a name="[f3]"></a>read_410_ports_info</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, s3c44b0x.o(i.read_410_ports_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = read_410_ports_info &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_irq_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
</UL>

<P><STRONG><a name="[f2]"></a>read_tray_info</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, s3c44b0x.o(i.read_tray_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = read_tray_info &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
</UL>

<P><STRONG><a name="[f4]"></a>read_version_info</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, s3c44b0x.o(i.read_version_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = read_version_info &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_rx_irq_enable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
</UL>

<P><STRONG><a name="[ef]"></a>sim3u146_kaiji_cmd_to_s3c2416</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, s3c44b0x.o(i.sim3u146_kaiji_cmd_to_s3c2416))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = sim3u146_kaiji_cmd_to_s3c2416 &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_feedback_msgs_to_s3c44b0x
</UL>

<P><STRONG><a name="[f0]"></a>sim3u146_updata_ok_to_s3c2416</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, s3c44b0x.o(i.sim3u146_updata_ok_to_s3c2416))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = sim3u146_updata_ok_to_s3c2416 &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_a_new_node
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_feedback_msgs_to_s3c44b0x
</UL>

<P><STRONG><a name="[f6]"></a>software_update_cf8051</STRONG> (Thumb, 1770 bytes, Stack size 32 bytes, s3c44b0x.o(i.software_update_cf8051))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = software_update_cf8051 &rArr; repost_update_packet &rArr; mySerial_send_string &rArr; mySerial_enable_send &rArr; WK2124_epca2_Send_String &rArr; Wk2124S2_5_SendBuf &rArr; EXHW_WK2412S2_Write_FIFO &rArr; SPI2_WK2412S2_Read_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_timer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_update_packet
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
</UL>

<P><STRONG><a name="[f5]"></a>software_update_sim3u1xx</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, s3c44b0x.o(i.software_update_sim3u1xx))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = software_update_sim3u1xx &rArr; ReadFlashData
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFLASHCTRL0_run_write_flash_mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myFLASHCTRL0_run_erase_page_mode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_mcu_enter_default_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
</UL>

<P><STRONG><a name="[f8]"></a>unControl_wirteEID_info</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, s3c44b0x.o(i.unControl_wirteEID_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = unControl_wirteEID_info &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
</UL>

<P><STRONG><a name="[f7]"></a>write_EID_to_410</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, s3c44b0x.o(i.write_EID_to_410))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = write_EID_to_410 &rArr; repost_data_to_cf8051_immediately &rArr; cmd_0x0d_sub_cmd_xx_timeout_func &rArr; add_a_new_node &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repost_data_to_cf8051_immediately
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part3_repost_s3c44bx0_data_to_cf8051
</UL>

<P><STRONG><a name="[50]"></a>Bsp_Board_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(i.Bsp_Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Bsp_Board_Init &rArr; Bsp_Usart2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_epca2_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_pca0_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_pca1_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_usart1_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_uart0_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Printf_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Usart2_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_TIM2_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Systick_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Spi_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Gpio_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S2_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXHW_WK2412S_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_usart0_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_epca0_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WK2124_epca1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a1]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[c0]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
